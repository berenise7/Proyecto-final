"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/api/usersFetch.js":
/*!*******************************!*\
  !*** ./src/api/usersFetch.js ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addFavoriteBook: () => (/* binding */ addFavoriteBook),\n/* harmony export */   deleteUser: () => (/* binding */ deleteUser),\n/* harmony export */   forgotPassword: () => (/* binding */ forgotPassword),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   handleLoginFetch: () => (/* binding */ handleLoginFetch),\n/* harmony export */   registerUser: () => (/* binding */ registerUser),\n/* harmony export */   removeFavoriteBook: () => (/* binding */ removeFavoriteBook),\n/* harmony export */   searchUsers: () => (/* binding */ searchUsers),\n/* harmony export */   updateNewRole: () => (/* binding */ updateNewRole),\n/* harmony export */   updateProfileFetch: () => (/* binding */ updateProfileFetch)\n/* harmony export */ });\n// Inicio de sesión\nconst handleLoginFetch = async (email, password)=>{\n    try {\n        const response = await fetch(\"http://localhost:9000/users/login\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                email,\n                password\n            })\n        });\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        return {\n            error: \"Ocurrió un error inesperado\"\n        };\n    }\n};\n// Registro de usuarios\nconst registerUser = async (formData)=>{\n    try {\n        const response = await fetch(\"http://localhost:9000/users/register\", {\n            method: \"POST\",\n            body: formData\n        });\n        if (!response.ok) {\n            let errorMessage = \"Error en la petici\\xf3n: \".concat(response.status, \" \").concat(response.statusText);\n            try {\n                const errorData = await response.json();\n                errorMessage = errorData.message || errorMessage;\n            } catch (e) {\n                const errorText = await response.text();\n                errorMessage = errorText || errorMessage;\n            }\n            return {\n                error: errorMessage\n            };\n        }\n        const userCreated = await response.json();\n        return userCreated;\n    } catch (error) {\n        return {\n            error: \"Ocurrió un error inesperado\"\n        };\n    }\n};\nconst forgotPassword = async (parametros)=>{\n    try {\n        const response = await fetch(\"http://ruta\", {\n            method: \"method\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: bodyParam\n        });\n        const data = await response.json();\n        if (response.ok) {\n            return data;\n        } else {\n            console.error(\"mensaje de error:\", data.message);\n        }\n    } catch (error) {\n        return {\n            error: \"Ocurrió un error inesperado\"\n        };\n    }\n};\n// Listado de usuarios\nconst getUsers = async function() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n    try {\n        const token = localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\n        const response = await fetch(\"http://localhost:9000/users?page=\".concat(page), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': \"Bearer \".concat(token)\n            }\n        });\n        const data = await response.json();\n        if (response.ok) {\n            return data;\n        } else {\n            console.error(\"mensaje de error:\", data.message);\n        }\n    } catch (error) {\n        return {\n            error: \"Ocurrió un error inesperado\"\n        };\n    }\n};\n// Editar rol de usuario\nconst updateNewRole = async (userId, newRole)=>{\n    try {\n        const token = localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\n        const response = await fetch(\"http://localhost:9000/users/new-role\", {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': \"Bearer \".concat(token)\n            },\n            body: JSON.stringify({\n                userId,\n                newRole\n            })\n        });\n        const data = await response.json();\n        if (response.ok) {\n            return data;\n        } else {\n            console.error(\"mensaje de error:\", data.message);\n        }\n    } catch (error) {\n        return {\n            error: \"Ocurrió un error inesperado\"\n        };\n    }\n};\n// Eliminar usuario\nconst deleteUser = async (userId)=>{\n    try {\n        const token = localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\n        const response = await fetch(\"http://localhost:9000/users/delete-user\", {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': \"Bearer \".concat(token)\n            },\n            body: JSON.stringify({\n                userId\n            })\n        });\n        const data = await response.json();\n        if (response.ok) {\n            return data;\n        } else {\n            console.error(\"mensaje de error:\", data.message);\n        }\n    } catch (error) {\n        return {\n            error: \"Ocurrió un error inesperado\"\n        };\n    }\n};\n// Busqueda de usuarios\nconst searchUsers = async (query)=>{\n    const token = localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\n    try {\n        const response = await fetch(\"http://localhost:9000/users/search?query=\".concat(encodeURIComponent(query)), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': \"Bearer \".concat(token)\n            }\n        });\n        const { data } = await response.json();\n        if (response.ok) {\n            return data;\n        } else {\n            console.error(\"mensaje de error:\", data.message);\n            return [];\n        }\n    } catch (error) {\n        return {\n            error: \"Ocurrió un error inesperado\"\n        };\n    }\n};\n// Añadir libros a favoritos\nconst addFavoriteBook = async (userId, bookId, token)=>{\n    try {\n        const response = await fetch(\"http://localhost:9000/users/favorites\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': \"Bearer \".concat(token)\n            },\n            body: JSON.stringify({\n                userId,\n                bookId\n            })\n        });\n        const data = await response.json();\n        if (response.ok) {\n            return data;\n        } else {\n            console.error(\"Error al agregar a favoritos\", data.message);\n            return null;\n        }\n    } catch (error) {\n        return {\n            error: \"Ocurrió un error inesperado\"\n        };\n    }\n};\n// Eliminar libros de favoritos\nconst removeFavoriteBook = async (userId, bookId, token)=>{\n    try {\n        const response = await fetch(\"http://localhost:9000/users/favorites\", {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': \"Bearer \".concat(token)\n            },\n            body: JSON.stringify({\n                userId,\n                bookId\n            })\n        });\n        const data = await response.json();\n        if (response.ok) {\n            return data;\n        } else {\n            console.error(\"Error al eliminar en favoritos\", data.message);\n            return null;\n        }\n    } catch (error) {\n        return {\n            error: \"Ocurrió un error inesperado\"\n        };\n    }\n};\n// Editar usuario\nconst updateProfileFetch = async (formDataToSend)=>{\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n    if (!token) {\n        console.error(\"No hay token de autenticación.\");\n        return {\n            status: \"Error\",\n            message: \"No hay token disponible\"\n        };\n    }\n    try {\n        console.log(\"Antes de llamada\");\n        const response = await fetch(\"http://localhost:9000/users/profile\", {\n            method: \"PUT\",\n            headers: {\n                'Authorization': \"Bearer \".concat(token)\n            },\n            body: formDataToSend\n        });\n        if (!response.ok) {\n            let errorMessage = \"Error en la petici\\xf3n: \".concat(response.status, \" \").concat(response.statusText);\n            try {\n                const errorData = await response.json();\n                errorMessage = errorData.message || errorMessage;\n            } catch (e) {\n                const errorText = await response.text();\n                errorMessage = errorText || errorMessage;\n            }\n            return {\n                error: errorMessage\n            };\n        }\n        const data = await response.json();\n        if (response.ok) {\n            return {\n                status: \"Succeeded\",\n                data\n            };\n        } else {\n            return {\n                status: \"Error\",\n                message: data.message\n            };\n        }\n    } catch (error) {\n        return {\n            status: \"Error\",\n            message: error.message\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/usersFetch.js\n"));

/***/ })

});